(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{213:function(t,r,e){"use strict";e.r(r);var a=e(7),i=Object(a.a)({},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"aop-aspect-oriented-programming-面向切面编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop-aspect-oriented-programming-面向切面编程","aria-hidden":"true"}},[t._v("#")]),t._v(" AOP(Aspect Oriented Programming)面向切面编程")]),t._v(" "),e("h2",{attrs:{id:"我的理解点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#我的理解点","aria-hidden":"true"}},[t._v("#")]),t._v(" 我的理解点")]),t._v(" "),e("ul",[e("li",[t._v("编程思想演进过程，面向过程编程POP(Procedure Oriented Programming)、面向对象编程OOP(Object Oriented Programming)、面向切面编程AOP(Aspect Oriented Programming)，POP和OOP是处理不同场景的两种想法，AOP是对OOP不足之处的补充")]),t._v(" "),e("li",[t._v("项目中加入AOP代码时不应该对业务代码有侵入性，而是应该对接入点(Joinpoint)进行仔细编写，精确匹配需要切的类或者方法")]),t._v(" "),e("li",[t._v("AOP是提取公共代码的一种方式，当项目中多处模块会使用同样的代码，就可以将这个同样代码提取一个切面类中")])]),t._v(" "),e("h2",{attrs:{id:"aop基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" AOP基本概念")]),t._v(" "),e("ul",[e("li",[t._v("Joinpoint(接入点)，程序执行中的要点。例如，joinpoints可以定义对类中特定方法的调用，我的理解应该就是编写匹配类或者方法的语句")]),t._v(" "),e("li",[t._v("Pointcuts(切入点)，用于指定连接点并在这些点处收集特定上下文的程序构造，我的理解就是定义的那个空的方法，结合接入点成为一个可以被调用的就是切入点。")]),t._v(" "),e("li",[t._v("Advices(通知)，满足特定条件时运行的代码。例如，建议可以在执行连接点之前记录消息。五个通知点，前置通知(before)、报错通知(after throwing)、后置通知(after)、环绕通知(around)、返回通知(after returning)")]),t._v(" "),e("li",[t._v("Aspect(切面)，切入点和通知的结合")]),t._v(" "),e("li",[t._v("Weave(织入)，将切面代码织入到目标程序中的方式，分为动态织入和静态织入。")])]),t._v(" "),e("h2",{attrs:{id:"扩展概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展概念")]),t._v(" "),e("ul",[e("li",[t._v("静态织入就是在编译期间，利用ajc编译器，将切面代码编入目标代码中。")]),t._v(" "),e("li",[t._v("动态织入又分JDK代理方式和cglib方式")]),t._v(" "),e("li",[t._v("JDK代理方式，底层是通过反射方式实现的，需要代理类要实现接口。Java中大致实现方式是，实现InvocationHandler，实现invoke方法")]),t._v(" "),e("li",[t._v("cglib方式，底层是通过继承方式实现的，cglib会用字节码方式生成代理类的子类，实现MethodInterceptor，实现intercept方法")])]),t._v(" "),e("h1",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/javazejian/article/details/56267036",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于 Spring AOP (AspectJ) 你该知晓的一切"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5b1ca657f265da6e5a205c45",target:"_blank",rel:"noopener noreferrer"}},[t._v("聊一聊 AOP ：表现形式与基础概念"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("面向切面的程序设计"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.javaworld.com/article/2074048/i-want-my-aop---part-2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn AspectJ to better understand aspect-oriented programming"),e("OutboundLink")],1)])])])},[],!1,null,null,null);r.default=i.exports}}]);